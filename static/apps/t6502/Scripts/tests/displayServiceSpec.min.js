var Tests;(function(){describe("display service",function(){var t=Constants.Display.Max,r=Constants.Display.Max+1,i=Constants.Memory.ByteMask,u=Constants.Memory.ByteMask+1,n;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(t){n=t})}),describe("given display service when called",function(){it("then should initialize the pixels array",function(){expect(n.pixels).toBeDefined(),expect(n.pixels.length).toBe(Constants.Display.Size)}),it("then should set the callback to null",function(){expect(n.callback).toBeNull()})}),describe("given no callback when draw method is called",function(){beforeEach(function(){n.draw(t,i)}),it("then should not throw an exception",function(){expect(n.pixels[t]).toBe(i)})}),describe("given callback when draw method is called",function(){var r=-1,u=-1;beforeEach(function(){n.callback=function(n,t){r=n,u=t},n.draw(t,i)}),it("then should call the callback with the address and value",function(){expect(r).toBe(t),expect(u).toBe(i)})}),describe("given invalid address when draw method is called",function(){beforeEach(function(){n.draw(r,i)}),it("then should mask the address to a valid value",function(){expect(n.pixels[r&Constants.Display.Max]).toBe(i)})}),describe("given invalid value when draw method is called",function(){beforeEach(function(){n.draw(t,u)}),it("then should mask the value to a valid value",function(){expect(n.pixels[t]).toBe(u&Constants.Memory.ByteMask)})}),describe("given valid address and value when draw method is called",function(){beforeEach(function(){n.draw(t,i)}),it("then should set the address to the value",function(){expect(n.pixels[t]).toBe(i)})})})})(Tests||(Tests={}))