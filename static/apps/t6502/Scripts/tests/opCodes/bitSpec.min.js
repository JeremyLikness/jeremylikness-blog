var Tests;(function(){var t=49152,i=0,n=[{value:1,accumulator:1,it:"when value & accumulator not zero then should not set zero flag",zeroFlag:!1,negativeFlag:!1,overflowFlag:!1},{value:1,accumulator:0,it:"when value & accumulator zero then should set zero flag",zeroFlag:!0,negativeFlag:!1,overflowFlag:!1},{value:Constants.ProcessorStatus.NegativeFlagSet,accumulator:255,it:"when value has negative flag set then should set negative flag",zeroFlag:!1,negativeFlag:!0,overflowFlag:!1},{value:Constants.ProcessorStatus.OverflowFlagSet,accumulator:255,it:"when value has overflow flag set then should set overflow flag",zeroFlag:!1,negativeFlag:!1,overflowFlag:!0},{value:Constants.ProcessorStatus.NegativeFlagSet|Constants.ProcessorStatus.OverflowFlagSet,accumulator:255,it:"when value has negative and overflow flag set then should set both flags",zeroFlag:!1,negativeFlag:!0,overflowFlag:!0}];describe("BIT - test bits",function(){var f,r,e,u;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(n,t){f=n,e=t,r=f.getCpu()})}),describe("BIT Absolute",function(){var i,f,e;for(beforeEach(function(){u=new Emulator.BitAbsolute,r.poke(r.rPC,t&Constants.Memory.ByteMask),r.poke(r.rPC+1,t>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask)}),i=0;i<n.length;i++)f=n[i],e=function(n){it(n.it,function(){r.poke(t,n.value),r.rA=n.accumulator,u.execute(r),expect(r.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(n.zeroFlag),expect(r.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(n.negativeFlag),expect(r.checkFlag(Constants.ProcessorStatus.OverflowFlagSet)).toBe(n.overflowFlag)})},e(f)}),describe("BIT Zero Page",function(){var t,f,e;for(beforeEach(function(){u=new Emulator.BitZeroPage,r.poke(r.rPC,i)}),t=0;t<n.length;t++)f=n[t],e=function(n){it(n.it,function(){r.poke(i,n.value),r.rA=n.accumulator,u.execute(r),expect(r.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(n.zeroFlag),expect(r.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(n.negativeFlag),expect(r.checkFlag(Constants.ProcessorStatus.OverflowFlagSet)).toBe(n.overflowFlag)})},e(f)})})})(Tests||(Tests={}))