var Tests;(function(){describe("Branch Operations",function(){function h(){return t?"not branch":"branch"}function c(){return t?"branch":"not branch"}function f(){describe("Given "+u+" is set",function(){beforeEach(function(){n.setFlag(r,!0),n.poke(n.rPC,6),e=n.rPC,i.execute(n)}),it("then should "+h(),function(){expect(n.rPC).toBe(t?e+1:e+7)})}),describe("Given "+u+" is not set",function(){beforeEach(function(){n.setFlag(r,!1),n.poke(n.rPC,6),e=n.rPC,i.execute(n)}),it("then should "+c(),function(){expect(n.rPC).toBe(t?e+7:e+1)})})}var o,n,s,i,r,u,t,e;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(t,i){o=t,s=i,n=o.getCpu()})}),describe("BMI - Branch on minus",function(){i=new Emulator.BranchMinusRelative,r=Constants.ProcessorStatus.NegativeFlagSet,u="Negative Flag",t=!1,f()}),describe("BPL - Branch on plus (positive)",function(){i=new Emulator.BranchPlusRelative,r=Constants.ProcessorStatus.NegativeFlagSet,u="Negative Flag",t=!0,f()}),describe("BEQ - Branch on zero (equal)",function(){i=new Emulator.BranchEqualRelative,r=Constants.ProcessorStatus.ZeroFlagSet,u="Zero Flag",t=!1,f()}),describe("BNE - Branch on not zero (not equal)",function(){i=new Emulator.BranchNotEqualRelative,r=Constants.ProcessorStatus.ZeroFlagSet,u="Zero Flag",t=!0,f()}),describe("BVC - Branch on overflow clear",function(){i=new Emulator.BranchOverflowClearRelative,r=Constants.ProcessorStatus.OverflowFlagSet,u="Overflow Flag",t=!0,f()}),describe("BVC - Branch on overflow set",function(){i=new Emulator.BranchOverflowSetRelative,r=Constants.ProcessorStatus.OverflowFlagSet,u="Overflow Flag",t=!1,f()}),describe("BCS - Branch on carry set",function(){i=new Emulator.BranchCarrySetRelative,r=Constants.ProcessorStatus.CarryFlagSet,u="Carry Flag",t=!1,f()}),describe("BCC - Branch on carry clear",function(){i=new Emulator.BranchCarryClearRelative,r=Constants.ProcessorStatus.CarryFlagSet,u="Carry Flag",t=!0,f()})})})(Tests||(Tests={}))