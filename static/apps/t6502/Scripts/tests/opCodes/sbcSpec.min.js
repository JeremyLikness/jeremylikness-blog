var Tests;(function(){function n(n){return n?"set":"reset"}function r(t){return"given carry flag "+n(t.carryFlag)+" and accumulator with value of "+t.accumulator.toString(10)+" when SBC executed with value of "+t.immediate.toString(10)}function u(t){return"then should provide result of "+t.expectedResult.toString(10)+" with carry flag "+n(t.expectedCarry)+" and negative flag "+n(t.expectedNegative)+" and zero flag "+n(t.expectedZero)+" and negative flag "+n(t.expectedNegative)}var t=[{carryFlag:!0,accumulator:32,immediate:16,expectedResult:16,expectedCarry:!0,expectedOverflow:!1,expectedZero:!1,expectedNegative:!1},{carryFlag:!0,accumulator:32,immediate:32,expectedResult:0,expectedCarry:!0,expectedOverflow:!1,expectedZero:!0,expectedNegative:!1},{carryFlag:!0,accumulator:32,immediate:33,expectedResult:255,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!0,accumulator:32,immediate:129,expectedResult:159,expectedCarry:!1,expectedOverflow:!0,expectedZero:!1,expectedNegative:!0},{carryFlag:!0,accumulator:144,immediate:64,expectedResult:80,expectedCarry:!0,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!0,accumulator:144,immediate:144,expectedResult:0,expectedCarry:!0,expectedOverflow:!1,expectedZero:!0,expectedNegative:!1},{carryFlag:!0,accumulator:144,immediate:160,expectedResult:240,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:32,immediate:16,expectedResult:15,expectedCarry:!0,expectedOverflow:!1,expectedZero:!1,expectedNegative:!1},{carryFlag:!1,accumulator:32,immediate:32,expectedResult:255,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:32,immediate:33,expectedResult:254,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:32,immediate:129,expectedResult:158,expectedCarry:!1,expectedOverflow:!0,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:144,immediate:64,expectedResult:79,expectedCarry:!0,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!1,accumulator:144,immediate:144,expectedResult:255,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:144,immediate:160,expectedResult:239,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0}],i=[{carryFlag:!0,accumulator:34,immediate:17,expectedResult:17,expectedCarry:!0,expectedOverflow:!1,expectedZero:!1,expectedNegative:!1},{carryFlag:!0,accumulator:34,immediate:34,expectedResult:0,expectedCarry:!0,expectedOverflow:!1,expectedZero:!0,expectedNegative:!1},{carryFlag:!0,accumulator:34,immediate:35,expectedResult:153,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!0,accumulator:34,immediate:130,expectedResult:64,expectedCarry:!1,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!0,accumulator:153,immediate:68,expectedResult:85,expectedCarry:!0,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!0,accumulator:153,immediate:153,expectedResult:0,expectedCarry:!0,expectedOverflow:!1,expectedZero:!0,expectedNegative:!1},{carryFlag:!0,accumulator:153,immediate:170,expectedResult:137,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:34,immediate:17,expectedResult:16,expectedCarry:!0,expectedOverflow:!1,expectedZero:!1,expectedNegative:!1},{carryFlag:!1,accumulator:34,immediate:34,expectedResult:153,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:34,immediate:35,expectedResult:152,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:34,immediate:130,expectedResult:57,expectedCarry:!1,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!1,accumulator:153,immediate:68,expectedResult:84,expectedCarry:!0,expectedOverflow:!0,expectedZero:!1,expectedNegative:!1},{carryFlag:!1,accumulator:153,immediate:153,expectedResult:153,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0},{carryFlag:!1,accumulator:153,immediate:170,expectedResult:136,expectedCarry:!1,expectedOverflow:!1,expectedZero:!1,expectedNegative:!0}];describe("SBC - Subtract with Carry",function(){var a,n,v,f,h=80,c=5,l=32,o=16,s=48,e=49152;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(t,i){a=t,v=i,n=a.getCpu()})}),describe("SBC Immediate",function(){var o=function(t,i){describe(r(t),function(){beforeEach(function(){n.setFlag(Constants.ProcessorStatus.DecimalFlagSet,i),n.setFlag(Constants.ProcessorStatus.CarryFlagSet,t.carryFlag),n.rA=t.accumulator,n.poke(n.rPC,t.immediate),f.execute(n)}),it(u(t),function(){expect(n.rA).toBe(t.expectedResult),expect(n.checkFlag(Constants.ProcessorStatus.CarryFlagSet)).toBe(t.expectedCarry),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(t.expectedNegative),expect(n.checkFlag(Constants.ProcessorStatus.OverflowFlagSet)).toBe(t.expectedOverflow),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(t.expectedZero)})})},e;beforeEach(function(){f=new Emulator.SubtractWithCarryImmediate,n.rP=0}),describe("given binary mode",function(){for(e=0;e<t.length;e++){var n=t[e];o(n,!1)}}),describe("given decimal mode",function(){for(e=0;e<i.length;e++){var n=i[e];o(n,!0)}})}),describe("SBC Zero Page",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryZeroPage,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given a zero page address",function(){beforeEach(function(){n.poke(n.rPC,h),n.poke(h,o),n.rA=s,f.execute(n)}),it("then should subtract the number at the address",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Zero Page, X",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryZeroPageX,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given a zero page address and X offset",function(){beforeEach(function(){n.poke(n.rPC,h),n.poke(h+c,o),n.rA=s,n.rX=c,f.execute(n)}),it("then should subtract the number at the address computed with the X offset",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Absolute",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryAbsolute,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given an absolute address",function(){beforeEach(function(){n.poke(n.rPC,e&Constants.Memory.ByteMask),n.poke(n.rPC+1,e>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.poke(e,o),n.rA=s,f.execute(n)}),it("then should subtract the number at the address",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Absolute X",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryAbsoluteX,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given an absolute address and X offset",function(){beforeEach(function(){n.poke(n.rPC,e&Constants.Memory.ByteMask),n.poke(n.rPC+1,e>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.poke(e+c,o),n.rA=s,n.rX=c,f.execute(n)}),it("then should subtract the number at the address adjusted by the X offset",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Absolute Y",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryAbsoluteY,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given an absolute address and Y offset",function(){beforeEach(function(){n.poke(n.rPC,e&Constants.Memory.ByteMask),n.poke(n.rPC+1,e>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.poke(e+l,o),n.rA=s,n.rY=l,f.execute(n)}),it("then should subtract the number at the address adjusted by the Y offset",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Indexed Indirect X",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryIndexedIndirectX,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given a zero page address and X offset",function(){beforeEach(function(){n.poke(n.rPC,h),n.poke(h+c,e&Constants.Memory.ByteMask),n.poke(h+c+1,e>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.poke(e,o),n.rA=s,n.rX=c,f.execute(n)}),it("then should locate the address at the zero page offset and use the value at that address to subtract",function(){expect(n.rA).toBe(s-o)})})}),describe("SBC Indirect Indexed Y",function(){beforeEach(function(){f=new Emulator.SubtractWithCarryIndirectIndexedY,n.setFlag(Constants.ProcessorStatus.CarryFlagSet,!0)}),describe("Given a zero page address and Y offset",function(){beforeEach(function(){n.poke(n.rPC,h),n.poke(h,e&Constants.Memory.ByteMask),n.poke(h+1,e>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.poke(e+l,o),n.rA=s,n.rY=l,f.execute(n)}),it("then should locate the address at the zero page offset then take that addres plus the y offset to subtract",function(){expect(n.rA).toBe(s-o)})})})})})(Tests||(Tests={}))