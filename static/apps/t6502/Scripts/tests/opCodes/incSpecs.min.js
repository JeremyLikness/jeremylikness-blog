var Tests;(function(){describe("Increment Specs",function(){var c,n,l,t,f=18,o=f+1,e=129,s=e+1,h=255,i=49152,r=80,u=5;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(t,i){c=t,l=i,n=c.getCpu()})}),describe("INX - Increment X Register",function(){beforeEach(function(){t=new Emulator.IncrementXSingle}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.rX=f,t.execute(n)}),it("then should set the X register to one more than the value",function(){expect(n.rX).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.rX=e,t.execute(n)}),it("then should set the X register to one more than the value and set the negative flag",function(){expect(n.rX).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.rX=h,t.execute(n)}),it("then should set the X register to zero (roll) and set the zero flag",function(){expect(n.rX).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})}),describe("INY - Increment Y Register",function(){beforeEach(function(){t=new Emulator.IncYSingle}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.rY=f,t.execute(n)}),it("then should set the Y register to one more than the value",function(){expect(n.rY).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.rY=e,t.execute(n)}),it("then should set the Y register to one more than the value and set the negative flag",function(){expect(n.rY).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.rY=h,t.execute(n)}),it("then should set the Y register to zero (roll) and set the zero flag",function(){expect(n.rY).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})}),describe("INC - Absolute",function(){beforeEach(function(){t=new Emulator.IncAbsolute,n.poke(n.rPC,i&Constants.Memory.ByteMask),n.poke(n.rPC+1,i>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask)}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.poke(i,f),t.execute(n)}),it("then should set the memory location to one more than the value",function(){expect(n.peek(i)).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.poke(i,e),t.execute(n)}),it("then should set the memory location to one more than the value and set the negative flag",function(){expect(n.peek(i)).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.poke(i,h),t.execute(n)}),it("then should set the memory location to zero (roll) and set the zero flag",function(){expect(n.peek(i)).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})}),describe("INC - Absolute X",function(){beforeEach(function(){t=new Emulator.IncAbsoluteX,n.poke(n.rPC,i&Constants.Memory.ByteMask),n.poke(n.rPC+1,i>>Constants.Memory.BitsInByte&Constants.Memory.ByteMask),n.rX=u}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.poke(i+u,f),t.execute(n)}),it("then should set the memory location with the X register offset applied to one more than the value",function(){expect(n.peek(i+u)).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.poke(i+u,e),t.execute(n)}),it("then should set the memory location with the X register offset applied to one more than the value and set the negative flag",function(){expect(n.peek(i+u)).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.poke(i+u,h),t.execute(n)}),it("then should set the memory location with the X register offset applied to zero (roll) and set the zero flag",function(){expect(n.peek(i+u)).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})}),describe("INC - Zero Page",function(){beforeEach(function(){t=new Emulator.IncZeroPage,n.poke(n.rPC,r)}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.poke(r,f),t.execute(n)}),it("then should set the memory location to one more than the value",function(){expect(n.peek(r)).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.poke(r,e),t.execute(n)}),it("then should set the memory location to one more than the value and set the negative flag",function(){expect(n.peek(r)).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.poke(r,h),t.execute(n)}),it("then should set the memory location to zero (roll) and set the zero flag",function(){expect(n.peek(r)).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})}),describe("INC - Zero Page, X",function(){beforeEach(function(){t=new Emulator.IncZeroPageX,n.poke(n.rPC,r),n.rX=u}),describe("given any value less than 0xFF",function(){beforeEach(function(){n.poke(r+u,f),t.execute(n)}),it("then should set the memory location with the X register offset applied to one more than the value",function(){expect(n.peek(r+u)).toBe(o),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given any negative value other than 0xFF",function(){beforeEach(function(){n.poke(r+u,e),t.execute(n)}),it("then should set the memory location with the X register offset applied to one more than the value and set the negative flag",function(){expect(n.peek(r+u)).toBe(s),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!1)})}),describe("given 0xFF",function(){beforeEach(function(){n.poke(r+u,h),t.execute(n)}),it("then should set the memory location with the X register offset applied to zero (roll) and set the zero flag",function(){expect(n.peek(r+u)).toBe(0),expect(n.checkFlag(Constants.ProcessorStatus.ZeroFlagSet)).toBe(!0),expect(n.checkFlag(Constants.ProcessorStatus.NegativeFlagSet)).toBe(!1)})})})})})(Tests||(Tests={}))