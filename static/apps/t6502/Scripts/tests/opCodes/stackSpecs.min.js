var Tests;(function(){describe("Stack Operations",function(){var i,n,r,t;beforeEach(function(){module("app")}),beforeEach(function(){inject(function(t,u){i=t,r=u,n=i.getCpu()})}),describe("PHA - Push Accumulator to Stack",function(){beforeEach(function(){t=new Emulator.PushAccumulatorSingle}),describe("given value in accumulator",function(){beforeEach(function(){n.rA=18,t.execute(n)}),it("then should push the value to the stack",function(){expect(n.stackPop()).toBe(18)})})}),describe("PLA - Pull Accumulator from Stack",function(){beforeEach(function(){t=new Emulator.PullAccumulatorSingle}),describe("given value in stack",function(){beforeEach(function(){n.stackPush(18),t.execute(n)}),it("then should set the accumulator to the value at the top of the stack",function(){expect(n.rA).toBe(18)})})}),describe("PHP - Push Processor Status to Stack",function(){beforeEach(function(){t=new Emulator.PushProcessorStatusSingle}),describe("given processor status",function(){beforeEach(function(){n.rP=parseInt("10101010",2),t.execute(n)}),it("then should push the value to the stack",function(){expect(n.stackPop()).toBe(parseInt("10101010",2))})})}),describe("PLP - Pull Processor Status from Stack",function(){beforeEach(function(){t=new Emulator.PullProcessorStatusSingle}),describe("given value in stack",function(){beforeEach(function(){n.stackPush(parseInt("10101010",2)),t.execute(n)}),it("then should set the processor status to the value at the top of the stack",function(){expect(n.rP).toBe(parseInt("10101010",2))})})}),describe("TXS - Transfer X Register to Stack Pointer",function(){beforeEach(function(){t=new Emulator.TransferXRegisterToStackPointerSingle}),describe("given value in x-register",function(){beforeEach(function(){n.rX=18,t.execute(n)}),it("then should update the stack pointer to match the value",function(){expect(n.rSP).toBe(18)})})}),describe("TSX - Transfer Stack Pointer to X Register",function(){beforeEach(function(){t=new Emulator.TransferStackPointerToXRegisterSingle}),describe("given value in stack pointer",function(){beforeEach(function(){n.rSP=18,t.execute(n)}),it("then should transfer the value to the X register",function(){expect(n.rX).toBe(18)})})})})})(Tests||(Tests={}))